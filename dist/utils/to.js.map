{"version":3,"file":"to.js","sources":["../../src/utils/to.ts"],"sourcesContent":["import type { Constructor } from 'type-fest';\n\nexport interface Success<T> {\n  ok: true;\n  result: T;\n}\n\nexport interface Err<E> {\n  ok: false;\n  result: E;\n}\n\nexport type Result<T, E> = Success<T> | Err<E>;\n\n/**\n * Converts a Promise into a Result object.\n * Usefull for handling \"expected\" errors. If the error is not of the expected type, it will still be thrown (\"unexpected\" error).\n * Error type is cheked at runtime, so we have a guarantee that the error is of the expected type. No typescript cast wizardry here.\n *\n * @example\n * const result = await to(getUserData(\"123\"), Error);\n *\n *  if (result.ok) {\n *    console.log(\"User data:\", result.result);\n *  } else {\n *    console.error(\"Error:\", result.result);\n *  }\n */\nexport default async function to<T, E extends Error>(\n  promise: Promise<T> | (() => Promise<T>),\n  error: Constructor<E>,\n): Promise<Result<T, E>> {\n  try {\n    return {\n      ok: true,\n      result: await (promise instanceof Promise ? promise : promise()),\n    };\n  } catch (err) {\n    // await err to make sure the error is resolved in the case of an error promise\n    const resolvedError = await err;\n    if (resolvedError instanceof error) {\n      return {\n        ok: false,\n        result: resolvedError as E,\n      };\n    }\n    throw resolvedError;\n  }\n}\n"],"names":["to","promise","error","ok","result","Promise","err","resolvedError"],"mappings":"AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,eAAeA,EAAEA,CAC9BC,OAAwC,EACxCC,KAAqB,EACE;EACvB,IAAI;IACF,OAAO;AACLC,MAAAA,EAAE,EAAE,IAAI;MACRC,MAAM,EAAE,OAAOH,OAAO,YAAYI,OAAO,GAAGJ,OAAO,GAAGA,OAAO,EAAE,CAAA;KAChE,CAAA;GACF,CAAC,OAAOK,GAAG,EAAE;AACZ;IACA,MAAMC,aAAa,GAAG,MAAMD,GAAG,CAAA;IAC/B,IAAIC,aAAa,YAAYL,KAAK,EAAE;MAClC,OAAO;AACLC,QAAAA,EAAE,EAAE,KAAK;AACTC,QAAAA,MAAM,EAAEG,aAAAA;OACT,CAAA;AACH,KAAA;AACA,IAAA,MAAMA,aAAa,CAAA;AACrB,GAAA;AACF;;;;"}